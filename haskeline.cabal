name:               haskeline
cabal-version:      >=1.10
version:            0.8.2.1
category:           User Interfaces
license:            BSD3
license-file:       LICENSE
copyright:          (c) Judah Jacobson
author:             Judah Jacobson
maintainer:         Judah Jacobson <judah.jacobson@gmail.com>
synopsis:
  A command-line interface for user input, written in Haskell.

description:
  Haskeline provides a user interface for line input in command-line
  programs.  This library is similar in purpose to readline, but since
  it is written in Haskell it is (hopefully) more easily used in other
  Haskell programs.
  .
  Haskeline runs both on POSIX-compatible systems and on Windows.

homepage:           https://github.com/judah/haskeline
bug-reports:        https://github.com/judah/haskeline/issues
stability:          Stable
build-type:         Simple
tested-with:
  GHC ==8.0.2
   || ==8.2.2
   || ==8.4.4
   || ==8.6.5
   || ==8.8.4
   || ==8.10.7
   || ==9.0.2
   || ==9.2.8
   || ==9.4.7
   || ==9.6.3
   || ==9.8.0

extra-source-files:
  Changelog
  examples/Test.hs
  includes/*.h

source-repository head
  type:     git
  location: https://github.com/judah/haskeline.git

-- There are three main advantages to the terminfo backend over the portable,
-- "dumb" alternative.  First, it enables more efficient control sequences
-- when redrawing the input.  Second, and more importantly, it enables us
-- to draw on multiple lines, so we can wrap long input strings.  And third,
-- the backend adds some extra key sequences such as forwards delete.
--
-- (The "dumb" terminal also allows editing of long input strings, but is
-- restricted to only one line and thus only shows part of the input at once.)
flag terminfo
  description: Use the terminfo package for POSIX consoles.
  default:     True
  manual:      True

-- Help the GHC build by making it possible to disable the extra binary.
-- TODO: Make GHC handle packages with both a library and an executable.
flag examples
  description: Enable executable components used for tests.
  default:     True
  manual:      True

library
  -- We require ghc>=7.4.1 (base>=4.5) to use the base library encodings, even
  -- though it was implemented in earlier releases, due to GHC bug #5436 which
  -- wasn't fixed until 7.4.1
  build-depends:
      base          >=4.9  && <4.20
    , bytestring    >=0.9  && <0.13
    , containers    >=0.4  && <0.8
    , directory     >=1.1  && <1.4
    , exceptions    >=0.10 && <0.11
    , filepath      >=1.2  && <1.6
    , process       >=1.0  && <1.7
    , stm           >=2.4  && <2.6
    , transformers  >=0.2  && <0.7

  default-language:   Haskell98
  default-extensions:
    CPP
    DeriveDataTypeable
    ExistentialQuantification
    FlexibleContexts
    FlexibleInstances
    ForeignFunctionInterface
    GeneralizedNewtypeDeriving
    MultiParamTypeClasses
    PatternGuards
    Rank2Types
    ScopedTypeVariables
    ScopedTypeVariables
    StandaloneDeriving
    TypeSynonymInstances
    UndecidableInstances

  exposed-modules:
    System.Console.Haskeline
    System.Console.Haskeline.Completion
    System.Console.Haskeline.History
    System.Console.Haskeline.Internal
    System.Console.Haskeline.IO

  other-modules:
    System.Console.Haskeline.Backend
    System.Console.Haskeline.Backend.WCWidth
    System.Console.Haskeline.Command
    System.Console.Haskeline.Command.Completion
    System.Console.Haskeline.Command.History
    System.Console.Haskeline.Command.KillRing
    System.Console.Haskeline.Command.Undo
    System.Console.Haskeline.Directory
    System.Console.Haskeline.Emacs
    System.Console.Haskeline.InputT
    System.Console.Haskeline.Key
    System.Console.Haskeline.LineState
    System.Console.Haskeline.Monads
    System.Console.Haskeline.Prefs
    System.Console.Haskeline.Recover
    System.Console.Haskeline.RunCommand
    System.Console.Haskeline.Term
    System.Console.Haskeline.Vi

  include-dirs:       includes
  c-sources:          cbits/h_wcwidth.c

  if os(windows)
    build-depends:    Win32 >=2.0
    other-modules:
      System.Console.Haskeline.Backend.Win32
      System.Console.Haskeline.Backend.Win32.Echo

    c-sources:        cbits/win_console.c
    includes:
      win_console.h
      windows_cconv.h

    install-includes: win_console.h
    cpp-options:      -DMINGW

  else
    build-depends: unix >=2.0 && <2.9
    other-modules:
      System.Console.Haskeline.Backend.DumbTerm
      System.Console.Haskeline.Backend.Posix
      System.Console.Haskeline.Backend.Posix.Encoder

    if flag(terminfo)
      build-depends: terminfo >=0.3.1.3 && <0.5
      other-modules: System.Console.Haskeline.Backend.Terminfo
      cpp-options:   -DTERMINFO

    if os(solaris)
      cpp-options: -DUSE_TERMIOS_H

  ghc-options:        -Wall -Wcompat

test-suite haskeline-tests
  type:               exitcode-stdio-1.0
  hs-source-dirs:     tests
  default-language:   Haskell98

  if os(windows)
    buildable: False

  if !flag(examples)
    buildable: False

  main-is:            Unit.hs
  build-depends:
      base
    , bytestring
    , containers
    , HUnit
    , process
    , text
    , unix

  other-modules:
    Pty
    RunTTY

  build-tool-depends: haskeline:haskeline-examples-Test

-- The following program is used by unit tests in `tests` executable
executable haskeline-examples-Test
  if !flag(examples)
    buildable: False

  build-depends:
      base
    , containers
    , haskeline

  default-language: Haskell2010
  hs-source-dirs:   examples
  main-is:          Test.hs
